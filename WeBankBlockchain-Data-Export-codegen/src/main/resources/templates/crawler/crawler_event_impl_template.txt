/**
 * Copyright (C) 2018 WeBank, Inc. All Rights Reserved.
 */
package ${group}.${projectName}.generated.crawler.event;

import java.math.BigInteger;
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.transaction.codec.decode.TransactionDecoderInterface;
import org.fisco.bcos.sdk.transaction.codec.decode.TransactionDecoderService;
import org.fisco.bcos.sdk.transaction.tools.JsonUtils;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import ${contractPackName}.${contractName};
import ${contractPackName}.${contractName}.${eventName}EventResponse;
import ${group}.${projectName}.crawler.face.BcosEventCrawlerInterface;
import ${group}.${projectName}.generated.bo.event.${class_name};
import com.webank.blockchain.data.export.common.bo.data.EventBO;
import com.webank.blockchain.data.export.common.constants.ContractConstants;
import com.webank.blockchain.data.export.common.tools.AddressUtils;
import com.webank.blockchain.data.export.common.tools.BigIntegerUtils;
import com.webank.blockchain.data.export.common.tools.BytesUtils;
import com.webank.blockchain.data.export.common.tools.JacksonUtils;
import com.webank.blockchain.data.export.parser.crawler.face.BcosEventCrawlerInterface;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
@ConditionalOnProperty(name = "monitor.${contractName}.${eventName}CrawlerService", havingValue = "on")
public class ${contractName}${eventName}CrawlerImpl implements BcosEventCrawlerInterface {
	@Autowired
    private Client client;
    @Autowired
    private CryptoKeyPair credentials;
    private ${contractName} contract;
    
    @Bean
    @ConditionalOnMissingBean
    public ${contractName} get${contractName}() {
        return ${contractName}.load(ContractConstants.EMPTY_ADDRESS, client, credentials); 

    }
	
	@Override
	public List<EventBO> handleReceipt(TransactionReceipt receipt, Date blockTimeStamp) {
			<%
				var upperEvent = strutil.toUpperCase(eventName);
			%>
		TransactionDecoderInterface decoder = new TransactionDecoderService(client.getCryptoSuite());
		List<EventBO> list = new ArrayList<>();
        try {
            	Map<String, List<List<Object>>> map = decoder.decodeEvents(contract.ABI, receipt.getLogs());
           		List<List<Object>> eventsList = map.get(contract.${upperEvent}_EVENT.getName());
           		if(CollectionUtils.isEmpty(eventsList)) {
           		    return list;
           		}
           		for (List<Object> events : eventsList) {       		
                	if (!CollectionUtils.isEmpty(events)) {             
                        ${class_name} ${lowContractName}${eventName} = new ${class_name}();                
                        ${lowContractName}${eventName}.setIdentifier("${contractName}${eventName}");		
						${lowContractName}${eventName}.setBlockHeight(receipt.getBlockNumber());
						${lowContractName}${eventName}.setEventContractAddress(receipt.getContractAddress());
						${lowContractName}${eventName}.setTxHash(receipt.getTransactionHash());				
						
						<%
							for(var i=0;i<list.~size;i++){
								var entry = list[i];
								var javaCapName = entry.javaCapName;
								var javaName = entry.javaName;
								var typeMethod = entry.typeMethod;			
						%>
							${lowContractName}${eventName}.set${javaCapName}(${typeMethod}(events.get(${i})));
						<% } %>
						${lowContractName}${eventName}.setBlockTimeStamp(blockTimeStamp);
						log.debug("depot ${eventName}:{}", ${lowContractName}${eventName}.toString());
						list.add(${lowContractName}${eventName});						
                	}
                }
        } catch (Exception e) {
            log.warn("Event parse error: {}", e);
        }		
		return list;
	}
}

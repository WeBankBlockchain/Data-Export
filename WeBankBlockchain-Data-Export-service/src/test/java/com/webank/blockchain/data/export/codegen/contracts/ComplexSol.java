package com.webank.blockchain.data.export.codegen.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.StaticArray2;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ComplexSol extends Contract {
    public static final String[] BINARY_ARRAY = {"","0080fd5b8135610c56610c51826114d9565b6114ac565b91508181835260208401935060208101905083856020840282011115610c7b57600080fd5b60005b83811015610cab5781610c918882610c1c565b845260208401935060208301925050600181019050610c7e565b5050505092915050565b600082601f8301121515610cc857600080fd5b8135610cdb610cd682611501565b6114ac565b9150818183526020840193506020810190508360005b83811015610d215781358601610d078882610d2b565b845260208401935060208301925050600181019050610cf1565b5050505092915050565b600082601f8301121515610d3e57600080fd5b8135610d51610d4c82611529565b6114ac565b91508082526020830160208301858383011115610d6d57600080fd5b610d788382846116ed565b50505092915050565b600082601f8301121515610d9457600080fd5b8135610da7610da282611555565b6114ac565b91508082526020830160208301858383011115610dc357600080fd5b610dce8382846116ed565b50505092915050565b6000610de382356116d9565b905092915050565b600082601f8301121515610dfe57600080fd5b8135610e11610e0c82611581565b6114ac565b91508082526020830160208301858383011115610e2d57600080fd5b610e388382846116ed565b50505092915050565b6000610e4d82356116e3565b905092915050565b600060208284031215610e6757600080fd5b600082013567ffffffffffffffff811115610e8157600080fd5b610e8d84828501610cb5565b91505092915050565b600060208284031215610ea857600080fd5b600082013567ffffffffffffffff811115610ec257600080fd5b610ece84828501610d81565b91505092915050565b600080600060608486031215610eec57600080fd5b6000610efa86828701610dd7565b935050602084013567ffffffffffffffff811115610f1757600080fd5b610f2386828701610c30565b925050604084013567ffffffffffffffff811115610f4057600080fd5b610f4c86828701610deb565b9150509250925092565b600060208284031215610f6857600080fd5b6000610f7684828501610e41565b91505092915050565b610f8881611679565b82525050565b6000610f99826115ed565b808452602084019350610fab836115ad565b60005b82811015610fdd57610fc1868351610f7f565b610fca82611645565b9150602086019550600181019050610fae565b50849250505092915050565b6000610ff4826115f8565b8084526020840193508360208202850161100d856115ba565b60005b84811015611046578383038852611028838351611132565b925061103382611652565b9150602088019750600181019050611010565b508196508694505050505092915050565b61106081611603565b611069826115c7565b60005b8281101561109b5761107f8583516112a0565b6110888261165f565b915060208501945060018101905061106c565b5050505050565b6110ab8161160e565b6110b4826115d1565b60005b828110156110e6576110ca8583546112a0565b6110d38261166c565b91506020850194506001810190506110b7565b5050505050565b6110f681611699565b82525050565b600061110782611624565b80845261111b8160208601602086016116fc565b6111248161172f565b602085010191505092915050565b600061113d82611619565b8084526111518160208601602086016116fc565b61115a8161172f565b602085010191505092915050565b60008154600181166000811461118557600181146111a5576111e6565b607f600283041680865260ff1983166020870152604086019350506111e6565b600282048086526020860195506111bb856115db565b60005b828110156111dd578154818901526001820191506020810190506111be565b80880195505050505b505092915050565b6111f7816116a5565b82525050565b60006112088261163a565b80845261121c8160208601602086016116fc565b6112258161172f565b602085010191505092915050565b600061123e8261162f565b8084526112528160208601602086016116fc565b61125b8161172f565b602085010191505092915050565b6000601a82527f4279746573206172726179206973206c657373207468616e20320000000000006020830152604082019050919050565b6112a9816116af565b82525050565b60006020820190506112c46000830184610f7f565b92915050565b60006040820190506112df6000830185610f7f565b6112ec60208301846112a0565b9392505050565b6000602082019050818103600083015261130d8184610fe9565b905092915050565b600060408201905061132a6000830184611057565b92915050565b60006080820190506113456000830185611057565b61135260408301846110a2565b9392505050565b600060208201905061136e60008301846110ed565b92915050565b6000602082019050818103600083015261138e8184611132565b905092915050565b600060208201905081810360008301526113b081846110fc565b905092915050565b600060408201905081810360008301526113d28185611168565b905081810360208301526113e681846110fc565b90509392505050565b600060208201905061140460008301846111ee565b92915050565b600060608201905061141f60008301866111ee565b81810360208301526114318185610f8e565b9050818103604083015261144581846111fd565b9050949350505050565b600060208201905081810360008301526114698184611233565b905092915050565b6000602082019050818103600083015261148a81611269565b9050919050565b60006020820190506114a660008301846112a0565b92915050565b6000604051905081810181811067ffffffffffffffff821117156114cf57600080fd5b8060405250919050565b600067ffffffffffffffff8211156114f057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561151857600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561154057600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561156c57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561159857600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000819050919050565b6000819050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600060029050919050565b600060029050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000600182019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561171a5780820151818401526020810190506116ff565b83811115611729576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820097d93e6048f4c1b64eb4e0a2024a82e49629ea494795664ac6eef60837e6ce26c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","0080fd5b8135610c56610c51826114d9565b6114ac565b91508181835260208401935060208101905083856020840282011115610c7b57600080fd5b60005b83811015610cab5781610c918882610c1c565b845260208401935060208301925050600181019050610c7e565b5050505092915050565b600082601f8301121515610cc857600080fd5b8135610cdb610cd682611501565b6114ac565b9150818183526020840193506020810190508360005b83811015610d215781358601610d078882610d2b565b845260208401935060208301925050600181019050610cf1565b5050505092915050565b600082601f8301121515610d3e57600080fd5b8135610d51610d4c82611529565b6114ac565b91508082526020830160208301858383011115610d6d57600080fd5b610d788382846116ed565b50505092915050565b600082601f8301121515610d9457600080fd5b8135610da7610da282611555565b6114ac565b91508082526020830160208301858383011115610dc357600080fd5b610dce8382846116ed565b50505092915050565b6000610de382356116d9565b905092915050565b600082601f8301121515610dfe57600080fd5b8135610e11610e0c82611581565b6114ac565b91508082526020830160208301858383011115610e2d57600080fd5b610e388382846116ed565b50505092915050565b6000610e4d82356116e3565b905092915050565b600060208284031215610e6757600080fd5b600082013567ffffffffffffffff811115610e8157600080fd5b610e8d84828501610cb5565b91505092915050565b600060208284031215610ea857600080fd5b600082013567ffffffffffffffff811115610ec257600080fd5b610ece84828501610d81565b91505092915050565b600080600060608486031215610eec57600080fd5b6000610efa86828701610dd7565b935050602084013567ffffffffffffffff811115610f1757600080fd5b610f2386828701610c30565b925050604084013567ffffffffffffffff811115610f4057600080fd5b610f4c86828701610deb565b9150509250925092565b600060208284031215610f6857600080fd5b6000610f7684828501610e41565b91505092915050565b610f8881611679565b82525050565b6000610f99826115ed565b808452602084019350610fab836115ad565b60005b82811015610fdd57610fc1868351610f7f565b610fca82611645565b9150602086019550600181019050610fae565b50849250505092915050565b6000610ff4826115f8565b8084526020840193508360208202850161100d856115ba565b60005b84811015611046578383038852611028838351611132565b925061103382611652565b9150602088019750600181019050611010565b508196508694505050505092915050565b61106081611603565b611069826115c7565b60005b8281101561109b5761107f8583516112a0565b6110888261165f565b915060208501945060018101905061106c565b5050505050565b6110ab8161160e565b6110b4826115d1565b60005b828110156110e6576110ca8583546112a0565b6110d38261166c565b91506020850194506001810190506110b7565b5050505050565b6110f681611699565b82525050565b600061110782611624565b80845261111b8160208601602086016116fc565b6111248161172f565b602085010191505092915050565b600061113d82611619565b8084526111518160208601602086016116fc565b61115a8161172f565b602085010191505092915050565b60008154600181166000811461118557600181146111a5576111e6565b607f600283041680865260ff1983166020870152604086019350506111e6565b600282048086526020860195506111bb856115db565b60005b828110156111dd578154818901526001820191506020810190506111be565b80880195505050505b505092915050565b6111f7816116a5565b82525050565b60006112088261163a565b80845261121c8160208601602086016116fc565b6112258161172f565b602085010191505092915050565b600061123e8261162f565b8084526112528160208601602086016116fc565b61125b8161172f565b602085010191505092915050565b6000601a82527f4279746573206172726179206973206c657373207468616e20320000000000006020830152604082019050919050565b6112a9816116af565b82525050565b60006020820190506112c46000830184610f7f565b92915050565b60006040820190506112df6000830185610f7f565b6112ec60208301846112a0565b9392505050565b6000602082019050818103600083015261130d8184610fe9565b905092915050565b600060408201905061132a6000830184611057565b92915050565b60006080820190506113456000830185611057565b61135260408301846110a2565b9392505050565b600060208201905061136e60008301846110ed565b92915050565b6000602082019050818103600083015261138e8184611132565b905092915050565b600060208201905081810360008301526113b081846110fc565b905092915050565b600060408201905081810360008301526113d28185611168565b905081810360208301526113e681846110fc565b90509392505050565b600060208201905061140460008301846111ee565b92915050565b600060608201905061141f60008301866111ee565b81810360208301526114318185610f8e565b9050818103604083015261144581846111fd565b9050949350505050565b600060208201905081810360008301526114698184611233565b905092915050565b6000602082019050818103600083015261148a81611269565b9050919050565b60006020820190506114a660008301846112a0565b92915050565b6000604051905081810181811067ffffffffffffffff821117156114cf57600080fd5b8060405250919050565b600067ffffffffffffffff8211156114f057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561151857600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561154057600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561156c57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561159857600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000819050919050565b6000819050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600060029050919050565b600060029050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000600182019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561171a5780820151818401526020810190506116ff565b83811115611729576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820be9c044f841ab4a7e8ade792b46e52238a4d7644497a593c5125eb7fee7e33ac6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[{\"name\":\"b\",\"type\":\"bytes\"}],\"name\":\"getByBytes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bytesArray\",\"type\":\"bytes[]\"}],\"name\":\"setBytesMapping\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_addrDArray\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_addr\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUint256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"v\",\"type\":\"uint256\"}],\"name\":\"incrementUint256\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_bytesV\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_s\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"getSArray\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[2]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"b\",\"type\":\"bytes\"}],\"name\":\"setBytes\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"i\",\"type\":\"int256\"},{\"name\":\"a\",\"type\":\"address[]\"},{\"name\":\"s\",\"type\":\"string\"}],\"name\":\"setValues\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_intV\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"emptyArgs\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"i\",\"type\":\"int256\"},{\"name\":\"s\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"LogIncrement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"s\",\"type\":\"string\"}],\"name\":\"LogInit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"i\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"a\",\"type\":\"address[]\"},{\"indexed\":false,\"name\":\"s\",\"type\":\"string\"}],\"name\":\"LogSetValues\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"o\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"b\",\"type\":\"bytes\"}],\"name\":\"LogSetBytes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"o\",\"type\":\"uint256[2]\"},{\"indexed\":false,\"name\":\"n\",\"type\":\"uint256[2]\"}],\"name\":\"LogSetSArray\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_GETBYBYTES = "getByBytes";

    public static final String FUNC_SETBYTESMAPPING = "setBytesMapping";

    public static final String FUNC__ADDRDARRAY = "_addrDArray";

    public static final String FUNC__ADDR = "_addr";

    public static final String FUNC_GETUINT256 = "getUint256";

    public static final String FUNC_INCREMENTUINT256 = "incrementUint256";

    public static final String FUNC__BYTESV = "_bytesV";

    public static final String FUNC__S = "_s";

    public static final String FUNC_GETSARRAY = "getSArray";

    public static final String FUNC_SETBYTES = "setBytes";

    public static final String FUNC_SETVALUES = "setValues";

    public static final String FUNC__INTV = "_intV";

    public static final String FUNC_EMPTYARGS = "emptyArgs";

    public static final Event LOGINCREMENT_EVENT = new Event("LogIncrement", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LOGINIT_EVENT = new Event("LogInit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event LOGSETVALUES_EVENT = new Event("LogSetValues", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event LOGSETBYTES_EVENT = new Event("LogSetBytes", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event LOGSETSARRAY_EVENT = new Event("LogSetSArray", 
            Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray2<Uint256>>() {}, new TypeReference<StaticArray2<Uint256>>() {}));
    ;

    protected ComplexSol(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public List getByBytes(byte[] b) throws ContractException {
        final Function function = new Function(FUNC_GETBYBYTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(b)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicBytes>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt setBytesMapping(List<byte[]> bytesArray) {
        final Function function = new Function(
                FUNC_SETBYTESMAPPING, 
                Arrays.<Type>asList(bytesArray.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(bytesArray, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBytesMapping(List<byte[]> bytesArray, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETBYTESMAPPING, 
                Arrays.<Type>asList(bytesArray.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(bytesArray, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytesMapping(List<byte[]> bytesArray) {
        final Function function = new Function(
                FUNC_SETBYTESMAPPING, 
                Arrays.<Type>asList(bytesArray.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(bytesArray, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<byte[]>> getSetBytesMappingInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETBYTESMAPPING, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicBytes>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(

                convertToNative((List<DynamicBytes>) results.get(0).getValue())
                );
    }

    public Tuple1<Boolean> getSetBytesMappingOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETBYTESMAPPING, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public String _addrDArray(BigInteger param0) throws ContractException {
        final Function function = new Function(FUNC__ADDRDARRAY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String _addr() throws ContractException {
        final Function function = new Function(FUNC__ADDR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public BigInteger getUint256() throws ContractException {
        final Function function = new Function(FUNC_GETUINT256, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt incrementUint256(BigInteger v) {
        final Function function = new Function(
                FUNC_INCREMENTUINT256, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(v)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void incrementUint256(BigInteger v, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INCREMENTUINT256, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(v)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForIncrementUint256(BigInteger v) {
        final Function function = new Function(
                FUNC_INCREMENTUINT256, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(v)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getIncrementUint256Input(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INCREMENTUINT256, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getIncrementUint256Output(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INCREMENTUINT256, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public byte[] _bytesV() throws ContractException {
        final Function function = new Function(FUNC__BYTESV, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public String _s() throws ContractException {
        final Function function = new Function(FUNC__S, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt getSArray() {
        final Function function = new Function(
                FUNC_GETSARRAY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void getSArray(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_GETSARRAY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForGetSArray() {
        final Function function = new Function(
                FUNC_GETSARRAY, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<BigInteger>> getGetSArrayOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_GETSARRAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<StaticArray2<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<BigInteger>>(

                convertToNative((List<Uint256>) results.get(0).getValue())
                );
    }

    public TransactionReceipt setBytes(byte[] b) {
        final Function function = new Function(
                FUNC_SETBYTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(b)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBytes(byte[] b, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETBYTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(b)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBytes(byte[] b) {
        final Function function = new Function(
                FUNC_SETBYTES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(b)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getSetBytesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETBYTES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public Tuple1<byte[]> getSetBytesOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETBYTES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public TransactionReceipt setValues(BigInteger i, List<String> a, String s) {
        final Function function = new Function(
                FUNC_SETVALUES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(i), 
                a.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(a, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setValues(BigInteger i, List<String> a, String s, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETVALUES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(i), 
                a.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(a, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(s)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetValues(BigInteger i, List<String> a, String s) {
        final Function function = new Function(
                FUNC_SETVALUES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(i), 
                a.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(a, org.fisco.bcos.sdk.abi.datatypes.Address.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(s)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, List<String>, String> getSetValuesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETVALUES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, List<String>, String>(

                (BigInteger) results.get(0).getValue(), 
                convertToNative((List<Address>) results.get(1).getValue()), 
                (String) results.get(2).getValue()
                );
    }

    public BigInteger _intV() throws ContractException {
        final Function function = new Function(FUNC__INTV, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt emptyArgs() {
        final Function function = new Function(
                FUNC_EMPTYARGS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void emptyArgs(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_EMPTYARGS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForEmptyArgs() {
        final Function function = new Function(
                FUNC_EMPTYARGS, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public List<LogIncrementEventResponse> getLogIncrementEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGINCREMENT_EVENT, transactionReceipt);
        ArrayList<LogIncrementEventResponse> responses = new ArrayList<LogIncrementEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogIncrementEventResponse typedResponse = new LogIncrementEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.a = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogIncrementEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGINCREMENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogIncrementEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGINCREMENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogInitEventResponse> getLogInitEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGINIT_EVENT, transactionReceipt);
        ArrayList<LogInitEventResponse> responses = new ArrayList<LogInitEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogInitEventResponse typedResponse = new LogInitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.s = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogInitEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGINIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogInitEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGINIT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogSetValuesEventResponse> getLogSetValuesEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGSETVALUES_EVENT, transactionReceipt);
        ArrayList<LogSetValuesEventResponse> responses = new ArrayList<LogSetValuesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogSetValuesEventResponse typedResponse = new LogSetValuesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.i = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.a = (List<String>) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.s = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogSetValuesEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGSETVALUES_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogSetValuesEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGSETVALUES_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogSetBytesEventResponse> getLogSetBytesEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGSETBYTES_EVENT, transactionReceipt);
        ArrayList<LogSetBytesEventResponse> responses = new ArrayList<LogSetBytesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogSetBytesEventResponse typedResponse = new LogSetBytesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.o = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.b = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogSetBytesEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGSETBYTES_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogSetBytesEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGSETBYTES_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<LogSetSArrayEventResponse> getLogSetSArrayEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LOGSETSARRAY_EVENT, transactionReceipt);
        ArrayList<LogSetSArrayEventResponse> responses = new ArrayList<LogSetSArrayEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogSetSArrayEventResponse typedResponse = new LogSetSArrayEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.o = (List<BigInteger>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.n = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeLogSetSArrayEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGSETSARRAY_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeLogSetSArrayEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(LOGSETSARRAY_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static ComplexSol load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ComplexSol(contractAddress, client, credential);
    }

    public static ComplexSol deploy(Client client, CryptoKeyPair credential, BigInteger i, String s) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(i), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(s)));
        return deploy(ComplexSol.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class LogIncrementEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public BigInteger a;
    }

    public static class LogInitEventResponse {
        public TransactionReceipt.Logs log;

        public String sender;

        public String s;
    }

    public static class LogSetValuesEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger i;

        public List<String> a;

        public String s;
    }

    public static class LogSetBytesEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] o;

        public byte[] b;
    }

    public static class LogSetSArrayEventResponse {
        public TransactionReceipt.Logs log;

        public List<BigInteger> o;

        public List<BigInteger> n;
    }
}

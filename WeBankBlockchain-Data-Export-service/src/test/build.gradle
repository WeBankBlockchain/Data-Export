plugins {
    id "org.springframework.boot" version "2.2.8.RELEASE"
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
    id 'eclipse'
    id 'idea'
    id 'maven'
}


allprojects {
  repositories {
    maven {
        url "http://maven.aliyun.com/nexus/content/groups/public/"
    }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://dl.bintray.com/ethereum/maven/" }
    mavenLocal()  
    jcenter() 
  }
}

subprojects {
  version = "1.7.0"
  apply plugin: "java"
  apply plugin: "org.springframework.boot"
  apply plugin: "io.spring.dependency-management"

  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'

  def defaultEncoding = 'UTF-8'
  tasks.withType(AbstractCompile).each { it.options.encoding = defaultEncoding }

  javadoc {
    options.encoding = defaultEncoding
    options.addBooleanOption('Xdoclint:none', true)
  }

  compileJava.dependsOn(processResources)


  springBoot {
    buildInfo()
  }

  dependencyManagement {
    imports {
      mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
    }
  }

  test {
    useJUnitPlatform()
  }

  dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    compile 'com.webank:data-export-sdk:1.7.2-SNAPSHOT'
    implementation('com.ibeetl:beetl:2.9.3')

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
  }
}




project(':WeBankBlockchain-Data-Export-service') {
  dependencies {
    compile 'com.webank:data-export-sdk:1.7.2-SNAPSHOT'
    implementation('com.ibeetl:beetl:2.9.3')
  }
}

configurations {
    all {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

